{
  "name": "sortzzy",
  "version": "0.1.1",
  "description": "A utility to fuzzy sort an array of JSON objects using levenshtein distance and fuzzy logic.",
  "main": "index.js",
  "scripts": {
    "test": "mocha "
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jefarmstrong/sortzzy.git"
  },
  "keywords": [
    "levenshtein",
    "distance",
    "fuzzy",
    "sort"
  ],
  "author": {
    "name": "Jef Armstrong",
    "email": "jef.armstrong@gmail.com"
  },
  "license": "BSD",
  "devDependencies": {
    "mocha": "~1.12.0",
    "should": "~1.2.2",
    "superagent": "~0.15.4"
  },
  "readme": "# Sortzzy\n\nSortzzy is a utility module which provides a simple way to fuzzy sort \nan array of JSON objects based on a target model and a set of weighted \nfield descriptors. Strings in the data set can be compared against the \nmodel with the built in Levenshtein Distance algorithm. Numerics can be\ncompared by their distance to a given number with a bounding range.\n\nThis utility was created out of a requirement to find the best matching\nsong given a model to start with. The problem was that song titles, album\ntitles and artist names don't always match and I needed to also take\ninto account numeric data like track times.  \n\n## Examples\n\nGiven some song data:\n\n```javascript\n\n    var data = [ \n     { \n       artistName: 'Justin Bieber',\n       collectionName: 'One Time (My Heart Edition) - Single',\n       trackName: 'One Time (My Heart Edition)',\n       trackTimeMillis: 191697,\n       },\n      { \n       artistName: 'Justin Bieber',\n       collectionName: 'My Worlds Acoustic',\n       trackName: 'One Time',\n       trackTimeMillis: 186267,\n       },\n     { \n       artistName: 'Justin Bieber',\n       collectionName: 'Radio Disney Jams 12',\n       trackName: 'One Time (My Heart Edition)',\n       trackTimeMillis: 190667,\n     },\n     { \n       artistName: 'The Justin Bieber Tribute Band',\n       collectionName: 'One Time - Single',\n       trackName: 'One Time',\n       trackTimeMillis: 240148,\n     }\n   \n     . . . \n    ]\n```\n\n\n```javascript\n    \n    var sortzzy = require('sortzzy')\n\n    // Create the model to match against\n    var model = {\n        artistName      : 'justin bieber',\n        trackName       : 'One Time',\n        trackTimeMillis : 190000 \n    }\n\n    // Define the fields \n    var fields = [\n          {name:'artistName', type:'string', weight:1, options:{ignoreCase:true}},\n          {name:'trackName', type:'string', weight:1, options:{ignoreCase:true}},\n          {name:'trackTimeMillis', type:'numeric', weight:2, fixedRange:[160000, 220000]}\n        ]\n\n    var result = sortzzy.sort(data, model, fields);\n\n    /*  \n        result[0] == \n        { \n          score: 0.9688916666666667,\n          data: {\n             artistName: 'Justin Bieber',\n             collectionName: 'My Worlds Acoustic',\n             trackName: 'One Time',\n             trackTimeMillis: 186267\n          }\n        }\n\n    */\n\n```\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/jefarmstrong/sortzzy/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install sortzzy\n\n\n## Documentation\n\n### sort(arr, model, fields, options)\n\nScores each item in the array as it relates to the given model using the array of field descriptors. Returns either a new array with a score element and the original data in a data element, or a new array sorted by the score, but without it being included.\n\n__Arguments__\n\n* **arr** - An array of JSON objects.\n* **model** - A JSON object that is the model of the item you are looking for.\n* **fields** - An array of field descriptors. Each field descriptor can have the following \n\n    * **name** - The name of the field in *model* for which this descriptor describes\n    * **type** - The type for this descriptor: *'string'* || *'numeric'* || *'boolean'*\n    * **weight** - The numeric weight for this field. Can be any number.\n    * **fixedRange** - *optional* - An array with a lower and upper bounds for the field value. Eg. ```[0,100]```\n    * **variableRange** - *optional* \n        * lowerOffset - A number which will be subtracted from the value of this fields model to set the lower bound of the fields value.\n        * upperOffset - A number which will be added to the value of this fields model to set the upper bound of the fields value. \n        *note: for numeric types, either fixedRange or variableRange should be included*\n    * **transform** - *optional* - A function to transform the value of the field. It should take one argument and return the transformed value.\n    * **levenshtein** - *optional* - Options for the levenshtein function (if this is a 'string' type). *(see levenshtein function for options)*\n* **options** - \n    * **minimumScoreThreshold** - Elements with scores below this threshold will not be included in resulting array.\n    * **dataOnly** - If true, then the resulting array is just the sorted data, no scores are returned.\n\n### score(obj, model, fields, options)\n\nSame as sort() but only returns the score for a single object compared against model.\n\n\n### levenshtein(stringX, stringY, options)\n\nPerforms the levenshtein distance algorithm between *stringX* and *stringY*.\n\n__Options__\n\n* **insCost** - the \"cost\" of an insert action in the levenshtein algorithm. Defaults to 1.\n* **delCost** - the \"cost\" of a deletion action in the levenshtein algorithm. Defaults to 1.\n* **subCost** - the \"cost\" of a substitution action in the levenshtein algorithm. Defaults to 1.\n* **transform** - a function that will be called for each string before the levenshtein distance algorithm is run. The function should take a single string and return a string. \n* **ignoreCase** - set to true to ignore case in the comparison.\n* **ignorePunctuation** - set to true to remove punctuation before the comparison.\n* **ignoreStopWords** - set to true to remove common words before the comparison. (see lib/stopWords)\n* **useFullStopWordsList** - set to true, in conjunction with *ignoreStopWords* to use a much larger list of common words (see lib/stopWords)\n* **stopWords** - an array of words to use as stop words, in conjuction with *ignoreStopWords*.\n* **sorted** - set to true to sort the words in each string before the comparison. \n\n### normalizedLevenshtein(stringX, stringY, options) \n\nSame as *levenshtein* but returns a score between 0 and 1.\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jefarmstrong/sortzzy/issues"
  },
  "_id": "sortzzy@0.1.1",
  "dist": {
    "shasum": "ff02490d16dacd4f06539cf412d1a5428836ff63"
  },
  "_from": "sortzzy@",
  "_resolved": "https://registry.npmjs.org/sortzzy/-/sortzzy-0.1.1.tgz"
}
